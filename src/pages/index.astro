---
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../consts';
import { getCollection } from 'astro:content';
import FormattedDate from '../components/FormattedDate.astro';

// Function to extract unique tags from blog posts
function extractUniqueTags(posts) {
    const allTags = posts.flatMap(post => post.data.tags || []);
    return [...new Set(allTags)].sort();
}

const posts = (await getCollection('blog')).sort(
    (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
);

const featuredPosts = posts.filter(post => post.data.featured).slice(0, 3);
const regularPosts = posts.filter(post => !post.data.featured);

const uniqueTags = extractUniqueTags(posts);
---

<!doctype html>
<html lang="en" class="scroll-smooth">
	<head>
		<BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
		<style>
			html {
				scroll-padding-top: 80px;
			}
		</style>
	</head>

	<body class="bg-gradient-to-b from-aimade-gray/30 to-white min-h-screen">
		<Header />
		
		<main class="container mx-auto px-4 md:px-6 pt-20 pb-12 max-w-6xl">
			<div class="mb-16">
				<div class="text-center mb-12">
					<span class="inline-block px-4 py-1.5 rounded-full bg-aimade-blue/10 text-aimade-blue font-medium text-sm mb-4">
						Our Blog
					</span>
					<h1 class="text-4xl md:text-5xl font-bold text-primary mb-4">
						Insights on <span class="blue-highlight">AI and Technology</span>
					</h1>
					<p class="text-muted-foreground max-w-2xl mx-auto text-lg">
						Demystifying artificial intelligence through clear, insightful, and accessible content.
					</p>
				</div>

				{/* Search and Filter Section */}
				<div class="mb-12">
					<div class="relative max-w-2xl mx-auto">
						<div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
							<svg class="h-5 w-5 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
								<path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.817A6 6 0 012 8z" clip-rule="evenodd" />
							</svg>
						</div>
						<input 
							type="text" 
							id="blog-search" 
							placeholder="Search articles..." 
							class="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-full focus:outline-none focus:ring-2 focus:ring-aimade-blue/50 text-gray-900"
						>
					</div>
					<div class="flex flex-wrap justify-center gap-2 mt-4">
						{uniqueTags.map(tag => (
							<button 
								type="button" 
								data-tag={tag}
								class="tag-filter-btn px-3 py-1 text-sm rounded-full border border-gray-300 text-gray-600 hover:bg-aimade-blue hover:text-white hover:border-aimade-blue transition-colors"
							>
								{tag}
							</button>
						))}
					</div>
				</div>

				{/* Featured Posts Section */}
				{featuredPosts.length > 0 && (
					<div class="mb-16">
						<h2 class="text-2xl font-bold text-primary mb-6 text-center">
							Featured Articles
						</h2>
						<div class="grid md:grid-cols-3 gap-6">
							{featuredPosts.map((post) => (
								<a 
									href={`/blog/${post.id}/`} 
									class="block group"
								>
									<div class="bg-white rounded-xl shadow-[0_4px_20px_rgba(0,0,0,0.05)] border border-gray-100 overflow-hidden">
										{post.data.heroImage && (
											<div class="aspect-video overflow-hidden">
												<img 
													src={post.data.heroImage} 
													alt={post.data.title} 
													class="w-full h-full object-cover transform group-hover:scale-105 transition-transform duration-300"
												/>
											</div>
										)}
										<div class="p-5">
											<div class="mb-2">
												{post.data.tags?.map(tag => (
													<span class="inline-block bg-aimade-blue/10 text-aimade-blue text-xs px-2 py-1 rounded-full mr-2 mb-2">
														{tag}
													</span>
												))}
											</div>
											<h3 class="text-xl font-bold text-primary group-hover:text-aimade-blue mb-3 transition-colors">
												{post.data.title}
											</h3>
											<p class="text-muted-foreground mb-4 line-clamp-3">
												{post.data.description}
											</p>
											<div class="flex items-center text-sm text-muted-foreground">
												<FormattedDate 
													date={post.data.pubDate} 
													variant="muted" 
													size="sm" 
												/>
												<span class="mx-2">•</span>
												<span>
													{Math.ceil(post.body.split(' ').length / 200)} min read
												</span>
											</div>
										</div>
									</div>
								</a>
							))}
						</div>
					</div>
				)}

				{/* All Posts Section */}
				<div>
					<h2 class="text-2xl font-bold text-primary mb-6 text-center">
						All Articles
					</h2>
					<div class="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
						{regularPosts.map((post) => (
							<a 
								href={`/blog/${post.id}/`} 
								class="block group"
							>
								<div class="bg-white rounded-xl shadow-[0_4px_20px_rgba(0,0,0,0.05)] border border-gray-100 overflow-hidden">
									{post.data.heroImage && (
										<div class="aspect-video overflow-hidden">
											<img 
												src={post.data.heroImage} 
												alt={post.data.title} 
												class="w-full h-full object-cover transform group-hover:scale-105 transition-transform duration-300"
											/>
										</div>
									)}
									<div class="p-5">
										<div class="mb-2">
											{post.data.tags?.map(tag => (
												<span class="inline-block bg-aimade-blue/10 text-aimade-blue text-xs px-2 py-1 rounded-full mr-2 mb-2">
													{tag}
												</span>
											))}
										</div>
										<h3 class="text-xl font-bold text-primary group-hover:text-aimade-blue mb-3 transition-colors">
											{post.data.title}
										</h3>
										<p class="text-muted-foreground mb-4 line-clamp-3">
											{post.data.description}
										</p>
										<div class="flex items-center text-sm text-muted-foreground">
											<FormattedDate 
												date={post.data.pubDate} 
												variant="muted" 
												size="sm" 
											/>
											<span class="mx-2">•</span>
											<span>
												{Math.ceil(post.body.split(' ').length / 200)} min read
											</span>
										</div>
									</div>
								</div>
							</a>
						))}
					</div>
				</div>

				{posts.length === 0 && (
					<div class="text-center py-16 bg-white rounded-xl shadow-[0_4px_20px_rgba(0,0,0,0.05)] border border-gray-100">
						<h2 class="text-2xl font-semibold text-muted-foreground mb-4">
							No blog posts yet
						</h2>
						<p class="text-muted-foreground">
							Stay tuned for upcoming insights and articles.
						</p>
					</div>
				)}
			</div>
		</main>

		<Footer />

		<script>
			document.addEventListener('DOMContentLoaded', () => {
				const searchInput = document.getElementById('blog-search');
				const tagFilterButtons = document.querySelectorAll('.tag-filter-btn');
				const blogPosts = document.querySelectorAll('main a[href^="/blog/"]');
				let activeTag = null;

				// Reset active tag styling
				function resetTagButtons() {
					tagFilterButtons.forEach(btn => {
						btn.classList.remove('bg-aimade-blue', 'text-white');
						btn.classList.add('border-gray-300', 'text-gray-600');
					});
				}

				// Tag filter button click handler
				tagFilterButtons.forEach(btn => {
					btn.addEventListener('click', () => {
						// If clicking the same tag, deselect it
						if (activeTag === btn.dataset.tag) {
							activeTag = null;
							resetTagButtons();
						} else {
							activeTag = btn.dataset.tag;
							resetTagButtons();
							btn.classList.remove('border-gray-300', 'text-gray-600');
							btn.classList.add('bg-aimade-blue', 'text-white');
						}
						filterPosts();
					});
				});

				function filterPosts() {
					const searchTerm = searchInput.value.toLowerCase();

					blogPosts.forEach(post => {
						const title = post.querySelector('h3').textContent.toLowerCase();
						const description = post.querySelector('p').textContent.toLowerCase();
						const tags = Array.from(post.querySelectorAll('.inline-block'))
							.map(tag => tag.textContent.toLowerCase());

						const matchesSearch = searchTerm === '' || 
							title.includes(searchTerm) || 
							description.includes(searchTerm);
						
						const matchesTag = !activeTag || 
							tags.includes(activeTag.toLowerCase());

						post.style.display = matchesSearch && matchesTag ? 'block' : 'none';
					});
				}

				searchInput.addEventListener('input', filterPosts);
			});
		</script>
	</body>
</html>